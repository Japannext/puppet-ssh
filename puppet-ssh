#!/usr/bin/env ruby

require 'json'
require 'net/ssh'
require 'optparse'
require 'ostruct'
require 'colored'
require 'pathname'
require 'date'
require 'open3'
require 'securerandom'
require 'io/wait'

options = OpenStruct.new

# Defaults
PUPPET = '/opt/puppetlabs/bin/puppet'

options.batch = 10
options.bar = false
options.user = ENV['USER']
options.method = :ruby
options.debug = false
additional_options = []
options.ssh_config = true # /etc/ssh/ssh_config + ~/.ssh/config

hosts = []
filename = 'default'

# Options
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] HOST..."
  opts.separator ''
  opts.separator 'Not all SSH config will be honored by ruby Net::SSH::Config.'
  opts.separator 'For more details: https://net-ssh.github.io/ssh/v2/api/classes/Net/SSH/Config.html'
  opts.separator ''
  opts.separator 'Options:'
  opts.on('-h file', '--hosts file', String, 'A file containing a list of hosts') do |file|
    filename = Pathname(file).basename
    hosts += File.read(file).each_line.map(&:chomp)
  end
  opts.on('-l user', '--login user', String, 'User to login with') do |user|
    options.user = user
  end
  opts.on('-e env', '--environment env', String, 'Puppet environment') do |env|
    additional_options << "--environment #{env}"
  end
  opts.on('-t tags', '--tags tags', String, 'A comma delimited list of tags') do |tags|
    additional_options << "--tags #{tags}"
  end
  opts.on('-b batch', '--batch batch', Integer, 'Batch size') do |batch|
    options.batch = batch
  end
  opts.on('-s source', '--source source', String, 'A regex to select only certain resources') do |s|
    options.source = s
  end
  opts.on('-m ruby|ssh', '--method ruby|ssh', [ :ruby, :ssh ], 'Which implementation to use for connecting to hosts') do |s|
    options.method = s
  end
  opts.on('-c config', '--ssh-config config', String, 'A custom SSH config. Default to reading /etc/ssh/ssh_config and ~/.ssh/config. Only relevant for --method=ruby.') do |config|
    options.ssh_config = config
  end
  opts.on('--[no-]bar', TrueClass, 'Show progress with a bar graph instead of exact numbers') do |s|
    options.bar = s
  end
  opts.on('--[no-]debug', TrueClass, 'Extra debug output on failure') do |s|
    options.debug = s
  end
  opts.on_tail('-h', '--help') do
    puts opts
    exit 1
  end
end.parse!

hosts += ARGV

now = DateTime.now.strftime('%Y-%m-%dT%H%M')
OUTFILE = Pathname.new("#{ENV['PWD']}/puppet_out") + "#{filename}-#{now}.log"
OUTFILE.dirname.mkpath

# Functions

def tarpit(message)
  if message =~ /^\-\-\-/ or message =~ /^\+\+\+/
    regex = /\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{9}/
    message.gsub!(regex, 'YYYY-MM-DD HH:mm:ss')
  end
  if message =~ /^\+\+\+/
    message.gsub!(%r{/tmp/puppet-file\S+}, '/tmp/puppet-fileXXXX')
  end

  if message =~ /src [0-9]+.[0-9]+.[0-9]+.[0-9]+ /
    message.gsub!(%r{src [0-9]+.[0-9]+.[0-9]+.[0-9]+ }, 'src xx.xx.xx.xx ')
  end

  return message
end

def format(message, hash)
  source = hash['source']
  level = hash['level']
  output = "#{source}: #{message}"
  output = case level
  when 'warning' then output.yellow
  when 'crit', 'err', 'alert', 'emerg' then output.red
  when 'info' then output.green
  else output
  end

  return "[#{level}] #{output}"
end

# Main loop
aggregates = {}

ssh_options = {
  config: options.ssh_config,
  non_interactive: true
}

mutex = Mutex.new

threads = []

@progress = {
  pending: hosts.size,
  wip: 0,
  done: 0,
  failed: 0,
}

@symbols = {
  pending: ?-,
  wip: ?+,
  done: ?#,
  failed: ?!,
}


def progress_string(bar)
  if bar then
    [ :failed, :done, :wip, :pending ].reduce("") { |string, state|
      string << @symbols[state] * @progress[state]
    }
  else
    "[P:%d W:%d D:%d F:%d]" % [ @progress[:pending], @progress[:wip], @progress[:done], @progress[:failed] ]
  end
end

def pipe_exec(stdin, stdout, stderr, debug, command)
  separator = "PUPPET_SSH_END_OF_COMMAND:#{SecureRandom.hex}"
  stdin.puts(command)
  stdin.puts("echo -n #{separator}")
  output = String.new
  while ! output.end_with?(separator)
    output << stdout.readpartial(1_000_000)
  end
  debug << stderr.readpartial(1_000_000)
  output.chomp(separator)
end

[ options.batch, hosts.size ].min.times { |thread_counter|

  threads << Thread.new do
    mutex.synchronize {
      Thread.current[:index] = thread_counter + 1
      Thread.current[:done] = 0
    }

    catch :done do

      loop {

        mutex.synchronize {
          throw :done if hosts.size == 0
          Thread.current[:host] = hosts.shift
          Thread.current[:done] += 1
          @progress[:pending] -= 1
          @progress[:wip] += 1
          puts "#{progress_string(options.bar)} Worker #{Thread.current[:index]}: Processing #{Thread.current[:host]}..."
        }

        begin
          output = ""
          debug = ""
          case options.method
          when :ruby then
            Net::SSH.start(Thread.current[:host], options.user, ssh_options) do |ssh|
              tmpdir = ssh.exec!('/usr/bin/mktemp -d').chomp
              logoutput = "#{tmpdir}/output.json"
              ssh.exec!("sudo #{PUPPET} agent --test --noop --logdest #{logoutput} #{additional_options.join(' ')}")
              ssh.loop
              output = ssh.exec!("cat #{logoutput}")
            end
          when :ssh then
            Open3.popen3("ssh", "-T", "-l", options.user, Thread.current[:host], "/usr/bin/env", "sh") { | stdin, stdout, stderr, thread |
              if stderr.ready?
                debug << stderr.readpartial(1_000_000)
              end
              pipe_exec(stdin, stdout, stderr, debug, "set -x")
              tmpdir = pipe_exec(stdin, stdout, stderr, debug, '/usr/bin/mktemp -d').chomp
              logoutput = "#{tmpdir}/output.json"
              pipe_exec(stdin, stdout, stderr, debug, "sudo #{PUPPET} agent --test --noop --logdest #{logoutput} #{additional_options.join(' ')}")
              output = pipe_exec(stdin, stdout, stderr, debug, "cat #{logoutput}")
              pipe_exec(stdin, stdout, stderr, debug, "rm -rf #{tmpdir}")
              if stderr.ready?
                debug << stderr.readpartial(1_000_000)
              end
            }
          else
            raise "Unexpected method [#{options.method}]"
          end

          Thread.current[:json] = JSON.parse(output + ']')

        rescue JSON::ParserError, EOFError, StandardError => err
          mutex.synchronize {
            puts "#{progress_string(options.bar)} Worker #{Thread.current[:index]}: Error processing #{Thread.current[:host]}: #{err}"
            @progress[:wip] -= 1
            @progress[:failed] += 1
            if options.debug then
              puts "DEBUG: #{debug}"
            end
          }
          next
        end

        mutex.synchronize {
          Thread.current[:json].each do |entry|
            message = tarpit(entry['message'])

            # Option to only include some resources matcching a regex
            next if options.source && entry['source'] !~ /#{options.source}/

            # Non-enssential and a lot of unique messages that make the output less readable
            next if entry['source'] == 'Puppet' and ['info', 'notice'].include?(entry['level'])

            # Removing pluginsync messages
            next if entry['source'] =~ %r{^/File}

            aggregates[message] ||= {}
            aggr = aggregates[message]
            aggr['hosts'] ||= []
            aggr['hosts'] << Thread.current[:host]
            aggr['hosts'] = aggr['hosts'].uniq
            aggr.merge!({
              'level'  => entry['level'],
              'tags'   => entry['tags'],
              'source' => entry['source'],
            })
          end

          @progress[:wip] -= 1
          @progress[:done] += 1

        }
      }
    end

    Thread.main.wakeup

  end

}

while threads.size > 0 do
  sleep(60)
  mutex.synchronize {
    threads.each_with_index { |t, index|
      unless t.alive? then
        puts "#{progress_string(options.bar)} Worker #{t[:index]}: Done after processing #{t[:done]} hosts."
        t.join
        threads.delete_at(index)
      end
    }
  }
end
OUTFILE.write('')
$output = OUTFILE.open('a')

def output(line)
  puts line
  $output.write("#{line}\n")
end

cases = aggregates.group_by { |_, v| v['hosts'] }
cases = cases.sort_by { |h, _| h.length }.reverse
cases.each_with_index do |(h, entries), index|
  output "[Case #{index + 1}/#{cases.size}] #{h.sort.join(' ')}".black_on_green
  entries.each do |(message, hash)|
    output format(message, hash)
  end
  output ''
end

# vim:sw=2:et:
